{
	"@namespaces": {
		"core": "core",
		"util": "contrib/utils"
	},

	"@aliases": {
		"ct": "core.Composite",
		"switch": "core.Switch",
		"iter": "core.Iteration",
		"jpar": "core.JsonParser",
		"cl": "util.CommandLine",
		"or": "util.OutputReport",
		"cron": "util.Cron"
	},
	"@version": "1.0",

	"@params": {
		"PROJECT_NAME": "$PROJECT_NAME"
	},

	"@init_mode": "lazy",

	"remote_pull_repo": {
	    "@type": "cl",
		"@params": {
			"command":"cd ~/applications/{PROJECT_NAME}; git pull {checkoutBranchCmd}",
			"ssh":true
			},
		"@haltOnError": true 
	},

	"prepare": {
	    "@type": "ct",
		"@description": "",
		"@params": {
			"PROJECT_NAME": "taskmator",
			"JENKINS_HOME":"/share/workspaces/jenkins/",
			"SERVICE_USER":"taskmator",
			"remoteLogin": "taskmator@deployserver",
			"sshKeyLocation": "~/.ssh/hostkey.pem"
		},

		"@haltOnError": true,

        "create_user": {"@type": "cl", "@params": {"command":"sudo adduser --system --no-create-home --group ${SERVICE_USER}", "ssh":true},"@haltOnError": true },
        "create_folders": {"@type": "cl", "@params": {"command":"cd ~; mkdir applications; cd applications; mkdir log; mkdir backup", "ssh":true},"@haltOnError": true },
        "clone_repo": {"@type": "cl", "@params": {"command":"cd ~/applications; git clone ${branchArg} ${PROJECT_REPO_URL}", "ssh":true},"@haltOnError": true },
        "change_group": {"@type": "cl", "@params": {"command":"sudo chgrp -R ${SERVICE_USER} ~/applications", "ssh":true},"@haltOnError": true },
        "register_service": {"@type": "cl", "@params": {"command":"sudo cp ~/applications/${PROJECT_NAME}/bin/{APP_NAME}.conf.${APP_ENV} /etc/init/${APP_NAME}.conf", "ssh":true},"@haltOnError": true },
        "start_service": {"@type": "cl", "@params": {"command":"sudo start ${APP_NAME}", "ssh":true},"@haltOnError": true },

		"@execMode": "parallel",
		"@exec": [
                "create_user",
                "create_folders",
                "clone_repo",
                "change_group",
                "register_service",
                "start_service"
            ]
	},

	"deploy": {
	    "@type": "ct",
		"@description": "Pulls a repository",
		"@params": {
			"APP_NAME":"TEST_APP",
			"PROJECT_NAME":"$PROJECT_NAME",
			"SERVICE_USER":"taskmator",
			"CLOSURE_COMP": true,
			"remoteLogin": "taskmator@deployserver",
			"sshKeyLocation": "~/.ssh/hostkey.pem"
		},

		"@haltOnError": true,

        "remote_service_stop": {"@type": "cl", "@params": {"command":"sudo stop ${APP_NAME}", "ssh":true}, "@haltOnError": true },
        "remote_change_group": {"@type": "cl", "@params": {"command":"sudo chgrp -R ${SERVICE_USER} ~/applications/${PROJECT_NAME}", "ssh":true},"@haltOnError": true },
        "remote_restart_service": {"@type": "cl", "@params": {"command":"sudo stop ${APP_NAME}; sudo start ${APP_NAME}", "ssh":true}, "@precond": "'${APP_NAME}'", "@haltOnError": true },
        "remote_closure_comp": {"@type": "cl", "@params": {"command":"cd ~/applications/${PROJECT_NAME}/js/; ./build.sh", "ssh":true}, "@precond": "'${CLOSURE_COMP}'", "@haltOnError": true },
        "report": {"@type": "or", "@params": {"command":"cd ~/applications/{PROJECT_NAME}/js/; ./build.sh", "ssh":true}, "@precond": "${CLOSURE_COMP}", "@haltOnError": true },
        "#root.remote_pull_repo": {"@params": {"this": "is optional"}},

		"@execMode": "sequential",
		"@exec": [
		    "remote_service_stop",
		    "#root.remote_pull_repo",
		    "remote_change_group",
		    "remote_restart_service",
		    "remote_closure_comp",
		    "report"
	        ]
	},

	"group_deploy": {
	    "@type": "iter",
		"@description": "For all logins, does a pull_repo",
		"@params": {
			"LOGINS": ["taskmator@deployserver1,taskmator@deployserver2"]
		},

		"@for": "$remoteLogin in ${LOGINS}",

		"@exec": {"#deploy": {"@params": {}}
	},

	"condition": {
	    "@type": "switch",
		"@description": "switch",
		"@params": {
		    "IGNORE": false
		},

		"@cases": {
		    "is_ignore":{"${IGNORE} == True":"#root.task1"},
		    "result_ok": {"cond":"${root.echo_hello.outcome_result} == 'OK'", "exec":"#root.task1"},
		    "result_err": {"cond":"${root.echo_hello.outcome_result} == 'ERROR'", "exec":{
		                                                                                "#handler_error":{"@args":{"message":"ERROR"} }
		                                                                                } }
		    }
		}

	},

	"test": "proc_etime.task.json",

	"monitorprocess": {
	    "@type": "cron",
		"@description": "Sample cron task",
		"@params": {
			"expression": "0 * * * * ",
			"task": "check_proc"
		},

		"@haltOnError": true,

		"@dependsOn": "prepare"
	},

	"proc_etime": {
	    "@type": "ct",
	    "@description": "Sample cron task",
		"@params": {
			"PROC_NAME": "index.js"
		},

		"@haltOnError": true,

		"get_pid": {"@type": "cl", "@params": {"command":"pgrep ${PROC_NAME}"}, "@haltOnError": true },
	    "get_etime": {"@type": "cl", "@params": {"PID": "${get_pid.outcome_result}", "command":"ps -p ${PID} -o etime="}, "@haltOnError": true },

		"@execMode": "sequential",
		"@exec": [
		        "get_pid",
		        "get_etime"
		    ]
	},

	"@exec":"monitorprocess"
}