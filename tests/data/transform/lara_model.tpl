<%namespace name="common" file="/codegen_common.tpl"/><%

    # comma separated list of fillable fields
    def get_fillables(fields):
        fillables = []
        for field in fields:
            if (field['type'] == 'auto'):
                continue
            fillables.append(field['name'])
        return '\''+ '\',\''.join(fillables) + '\''

    def get_validation_entries(fields):
        entries = []
        for field in fields:
            if ('validation' in field):
		        entries.append("'" + field['name'] + "' => '" + field['validation'] + "'")
        return ",\n\t\t".join(entries)

%><?php
/**
 * Models from schema: ${ model['schema-name'] } version ${ model['version'] }
 * Code generated by ${params['TASK_TYPE_NAME']}
 *
 */

% for entity_name, entity_def in model['entities'].iteritems():
class ${common.to_camelcase(entity_name, True)} extends Eloquent {

    /**
	 * The database table used by the model.
	 *
	 * @var string
	 */
    protected $table = '${common.get_plural(entity_name)}';

    /**
	 * The primary key column name.
	 *
	 * @var string
	 */
	protected $primaryKey = 'sid';

	/**
	 * To disable created_at and updated_at.
	 *
	 * @var boolean
	 */
	public $timestamps = false;


    /**
	 * The field list for mass assignment.
	 *
	 * @var array
	 */
    protected $fillable = array(${get_fillables(entity_def['fields'])});

    /**
     * Validation rules for creation
     *
     * @var array
     */
    private static $validation_rules_create = array(
        ${ get_validation_entries(entity_def['fields']) }
    	);

    /**
     * Validation rules for update
     *
     * @var array
     */
    private static $validation_rules_udpate = array(
        ${ get_validation_entries(entity_def['fields']) }
    	);

    /**
     * Returns the validation object
     */
    public static function validator($fields, $is_create = true)
    {
    	$rules = ($is_create) ? static::$validation_rules_create : static::$validation_rules_update;
        $validator = Validator::make($fields, $rules);

        return $validator;
    }

% if ('relations' in entity_def):
% for relation in entity_def['relations']:
    public function ${relation['entity']}()
    {
        return $this->${common.to_camelcase(relation['kind'])}('${relation['entity'].capitalize()}');
    }
% endfor
% endif
}
% endfor
