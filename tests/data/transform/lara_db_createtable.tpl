<%namespace name="common" file="/codegen_common.tpl"/><%
    def get_type(field):
        type = field['type']
        if (type == 'auto'):
            return 'increments'
        elif (type == 'int'):
            return 'integer'
        elif (type == 'long'):
            return 'bigInteger'
        elif (type == 'datetime'):
            return 'dateTime'
        endif
        return field['type']

    def get_length(field):
        if ('length' in field):
            return ', ' + str(field['length'])
        return ''

    def get_modifiers(field):
        modifs = []
        if ('is_nullable' in field and field['is_nullable']):
            modifs.append('->nullable()')
        if ('is_unique' in field and field['is_unique']):
            modifs.append('->unique()')
        if ('default' in field):
            modifs.append('->default(\''+ str(field['default']) + '\')')

        return ''.join(modifs)

    # Returns the type of index (primary, unique, or index)
    def get_index_type(index):
        return index['type'] if ('type' in index) else 'index'

    def get_index_cols(index):
        colnum = len(index['columns'])
        if (colnum > 1):
            return "array('" + "','".join(index['columns']) + "')"
        return "'" + index['columns'][0] + "'"

    def get_constraint(constr):
        return constr['kind']

    def get_constraint_param(constr):
        if (constr['kind'] == 'foreign'):
            return constr['key']
        else:
            return constr['field']

    def get_constraint_modifiers(constr):
        if (constr['kind'] != 'foreign'):
            return ''
        retval = '->references(\'' + constr['reference'] +'\')' + '->on(\'' + constr['on'] +'\')'

        return retval

%><?php

/**
 * Migration from schema: ${ model['schema-name'] } version ${ model['version'] }
 * Code generated by ${params['TASK_TYPE_NAME']}
 *
 */
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

% for entity_name, entity_def in model['entities'].iteritems():
/**
 * Issue this command: $php artisan migrate:make create_${entity_name}_table --create=${entity_name}
 * Then copy/paste the content to the file generated on app/database/migrations/<timestamp>-create_${entity_name}_table.php
 * To run the migration script do: $php artisan migrate
 */
class Create${common.to_camelcase(entity_name, True, True)}Table extends Migration {

	/**
	 * Run the migrations.
	 *
	 * @return void
	 */
	public function up()
	{
		Schema::create('${common.get_plural(entity_name)}', function(Blueprint $table)
		{
% for field in entity_def['fields']:
			$table->${get_type(field)}('${field["name"]}'${get_length(field)})${get_modifiers(field)};
% endfor
% if ('indexes' in entity_def):
% for index in entity_def['indexes']:
		    $table->${get_index_type(index)}(${get_index_cols(index)});
% endfor
% endif
% if ('constraints' in entity_def):
% for constr in entity_def['constraints']:
		    $table->${get_constraint(constr)}('${get_constraint_param(constr)}')${get_constraint_modifiers(constr)};
% endfor
% endif
		});
	}

	/**
	 * Reverse the migrations.
	 *
	 * @return void
	 */
	public function down()
	{
		Schema::dropIfExists('${common.get_plural(entity_name)}');
	}

}
% endfor
