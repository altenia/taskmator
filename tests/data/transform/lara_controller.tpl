<%
    import re

    # Convert underscore to camelCase
    under_pat = re.compile(r'_([a-z])')
    def underscore_to_camel(text):
        return under_pat.sub(lambda x: x.group(1).upper(), text)

    def get_singular(name, capitalize = True):
        retval = name
        if (name[len(name)-1] == 's'):
            retval = name[0:len(name)-1]
        if (capitalize):
            retval = retval.capitalize();
        return retval

    # Camel and capitalize
    def name_for_suffix(name, singular=True):
        namex = name
        if (singular):
            namex = get_singular(name);
        return underscore_to_camel(namex).capitalize();

    def service_call(name, method, singular=True):
        return '$this->' + get_singular(entity_name, False) + 'Service->' + method + name_for_suffix(entity_name, singular);

%><?php
/**
 * Models from schema: ${ model['schema-name'] } version ${ model['version'] }
 * Code generated by ${params['TASK_TYPE_NAME']}
 *
 */


% for entity_name, entity_def in model['entities'].iteritems():
/**
 * Controller class that provides web access to ${get_singular(entity_name, True)} resource
 *
 * @todo: Add following line in app/routes.php
 * Route::resource('${entity_name}', '${get_singular(entity_name, True)}Controller');
 */
class ${get_singular(entity_name, True)}Controller extends \BaseController {

    // The service object
	protected $${get_singular(entity_name, False)}Service;

	protected $layout = 'layouts.master';

	/**
	 * Constructor
	 */
	public function __construct() {
        $this->${get_singular(entity_name, False)}Service = new Services\${get_singular(entity_name, True)}Service();
    }

	/**
	 * Display a listing of the resource.
	 *
	 * @return Response
	 */
	public function index()
	{
		$qparams = Input::all();
		$records = ${service_call(entity_name, 'list', False)}($qparams);
		$this->layout->content = View::make('${entity_name}.index')
		    ->with('records', $records);
	}

	/**
	 * Show the form for creating a new resource.
	 *
	 * @return Response
	 */
	public function create()
	{
		$this->layout->content = View::make('${entity_name}.create');
	}

	/**
	 * Store a newly created resource in storage.
	 *
	 * @return Response
	 */
	public function store()
	{
		$data = Input::all();

		try {
            $user = ${service_call(entity_name, 'create', True)}($data);
            Session::flash('message', 'Successfully created!');
            return Redirect::to('users');
        } catch (Services\ValidationException $ve) {
            return Redirect::to('users/create')
                ->withErrors($ve->getObject());
                //->withInput(Input::except('password'));
        } catch (Exception $e) {
            return Redirect::to('users/create')
                ->withErrors($e->getMessage());
                //->withInput(Input::except('password'));
        }
	}

	/**
	 * Display the specified resource.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function show($id)
	{
		$record = ${service_call(entity_name, 'find', True)}($id);

		// show the view and pass the nerd to it
		$this->layout->content = View::make('${entity_name}.show')
			->with('record', $record);
	}

	/**
	 * Show the form for editing the specified resource.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function edit($id)
	{
	    $record = ${service_call(entity_name, 'find', True)}($id);

		$this->layout->content = View::make('${entity_name}.edit')
		    ->with('record', $record);
	}

	/**
	 * Update the specified resource in storage.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function update($id)
	{

		$data = Input::all();
		$validator = ${get_singular(entity_name, True)}::validator($data);
        if ($validator->passes()) {
            $record = ${get_singular(entity_name, True)}::find($id);
            $record->fill($data);
            $record->save();

            // @todo: Redirect to proper URL
            Session::flash('message', 'Successfully updated!');
            return Redirect::to('${entity_name}');
        } catch (Services\ValidationException $ve) {
            return Redirect::to('${entity_name}/' . $id . '/edit')
                ->withErrors($ve->getObject());
                //->withInput(Input::except('password'));
        } catch (Exception $e) {
            return Redirect::to('${entity_name}/' . $id . '/edit')
                ->withErrors($e->getMessage());
                //->withInput(Input::except('password'));
        }
	}

	/**
	 * Remove the specified resource from storage.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function destroy($id)
	{
		// delete
		$success = ${service_call(entity_name, 'destroy', True)}($id);

		if ($success) {
            Session::flash('message', 'Successfully deleted!');
            return Redirect::to('users');
        } else {
            Session::flash('message', 'Entry not found');
            return Redirect::to('users');
        }
	}
}
% endfor
